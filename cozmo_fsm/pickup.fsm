from cozmo.util import Pose
from cozmo.objects import LightCube

from .nodes import *
from .transitions import *
from .transform import wrap_angle, line_equation, line_intersection
from .cozmo_kin import center_of_rotation_offset
from .pilot import PilotToPose, PilotCheckStart, ParentPilotEvent, StartCollides, InvalidPose
from .worldmap import LightCubeObj
from .doorpass import WallPilotToPose
from .trace import tracefsm

from math import sin, cos, atan2, pi, sqrt

class GoToCube(StateNode):
    def __init__(self, cube=None):
        self.object = cube
        super().__init__()

    def start(self, event=None):
        # self.object will normally be set up by the parent of this node
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.children['looker'].object = self.object
        self.sides = []
        self.side = None
        super().start(event)
        if self.wmobject.pose_confidence < 0:
            print('GoToCube: cube has invalid pose!', self.wmobject, self.object.pose)
            self.post_event(PilotEvent(InvalidPose))
            self.post_failure()

    def pick_side(self, dist, use_world_map):
        "*** BUG: This code is only correct for upright cubes"
        cube = self.object
        if use_world_map:
            wobj = self.robot.world.world_map.objects[cube] 
            x = wobj.x
            y = wobj.y
            ang = wobj.theta
            rx = self.robot.world.particle_filter.pose[0]
            ry = self.robot.world.particle_filter.pose[1]
        else:
            x = cube.pose.position.x
            y = cube.pose.position.y
            ang = cube.pose.rotation.angle_z.radians
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
        side1 = [ (x + cos(ang)*dist), (y + sin(ang)*dist), ang + pi   ]
        side2 = [ (x - cos(ang)*dist), (y - sin(ang)*dist), ang        ]
        side3 = [ (x + sin(ang)*dist), (y - cos(ang)*dist), ang + pi/2 ]
        side4 = [ (x - sin(ang)*dist), (y + cos(ang)*dist), ang - pi/2 ]
        sides = (side1, side2, side3, side4)
        sorted_sides = sorted(sides, key=lambda pt: (pt[0]-rx)**2 + (pt[1]-ry)**2)
        return sorted_sides[0]

    def get_robot_pose(self, use_world_map):
        if use_world_map:
            rx = self.robot.world.particle_filter.pose[0]
            ry = self.robot.world.particle_filter.pose[1]
            rtheta = self.robot.world.particle_filter.pose[2]
        else:
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            rtheta = self.robot.pose.rotation.angle_z.radians
        return (rx, ry, rtheta)

    def get_robot_line(self, use_world_map):
        (rx, ry, rtheta) = self.get_robot_pose(use_world_map)
        cx = rx + center_of_rotation_offset*cos(rtheta)
        cy = ry + center_of_rotation_offset*sin(rtheta)
        return line_equation((rx,ry), (cx,cy))

    def get_cube_line(self, use_world_map):
        if use_world_map:
            ox = self.parent.wmobject.x
            oy = self.parent.wmobject.y
        else:
            ox = self.parent.object.pose.position.x
            oy = self.parent.object.pose.position.y
        (sx, sy, stheta) = self.side
        return line_equation((ox,oy), (sx,sy))

    def measure_dockedness(self, side, use_world_map):
        """Returns distance and relative angle to specified docking pose."""
        (rx, ry, rtheta) = self.get_robot_pose(use_world_map)
        (ox, oy, otheta) = side
        dist = math.sqrt((rx-ox)**2 + (ry-oy)**2)
        relative_angle = abs(wrap_angle(rtheta-otheta) % (pi/2)) * (180/pi)
        return (dist, relative_angle)

    class PilotToSide(PilotToPose):
        def __init__(self):
            super().__init__(None, verbose=True)

        def start(self, event=None):
            cube = self.parent.object
            (x, y, theta) = self.parent.pick_side(100, use_world_map=True)
            self.target_pose = Pose(x, y, self.robot.pose.position.z,
                                    angle_z=Angle(radians=wrap_angle(theta)))
            (px,py,pq) = self.robot.world.particle_filter.pose
            print('PilotToSide: planned path from (%.1f, %.1f) @ %.1f deg. to pickup point (%.1f, %.1f) @ %.1f deg.' %
                  (px, py, pq*180/pi,
                   self.target_pose.position.x, self.target_pose.position.y,
                   self.target_pose.rotation.angle_z.degrees))
            super().start(event)


    class ReportPosition(StateNode):
        def __init__(self,id=None):
            super().__init__()
            self.id_string = id + ': ' if id else ''

        def start(self,event=None):
            super().start(event)
            cube = self.parent.object
            vis = 'visible' if cube.is_visible else 'not visible'
            cx = cube.pose.position.x
            cy = cube.pose.position.y
            rx = self.robot.pose.position.x
            ry = self.robot.pose.position.y
            dx = cx - rx
            dy = cy - ry
            dist = math.sqrt(dx*dx + dy*dy)
            bearing = wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) * 180/pi
            print('%scube %s at (%5.1f,%5.1f)  robot at (%5.1f,%5.1f)  dist=%5.1f  rel. brg=%5.1f' %
                  (self.id_string, vis, cx, cy, rx, ry, dist, bearing))


    class TurnToCube(Turn):
        def __init__(self, check_vis=False):
            self.check_vis = check_vis
            super().__init__()

        def start(self, event=None):
            if self.running: return
            cube = self.parent.object
            if self.check_vis and not cube.is_visible:
                print('** TurnToCube %s could not see the cube.' % self.name)
                self.angle = None
                super().start(event)
                self.post_failure()
            else:
                (cx, cy, _) = self.parent.pick_side(0, False)
                rx = self.robot.pose.position.x
                ry = self.robot.pose.position.y
                dx = cx - rx
                dy = cy - ry
                dist = math.sqrt(dx*dx + dy*dy)
                self.angle = degrees(wrap_angle(atan2(dy,dx) - self.robot.pose.rotation.angle_z.radians) \
                                     * 180/pi)
                if abs(self.angle.degrees) <= 2:
                    self.angle = degrees(0)
                if abs(self.angle.degrees) > 60:
                    print('********>> BIG TURN in',self)
                print('TurnToCube %s: cube at (%5.1f,%5.1f)  robot at (%5.1f,%5.1f)  dist=%5.1f  turn angle=%5.1f' %
                      (self.name, cx, cy, rx, ry, dist, self.angle.degrees))
                super().start(event)


    class CheckAlmostDocked(StateNode):
        # *** TODO: convert to iterate through all feasible sides
        def start(self, event=None):
            if self.running: return
            super().start(event)
            cube = self.parent.object
            side = self.parent.pick_side(25, False)
            self.parent.side = side
            (dist, relative_angle) = self.parent.measure_dockedness(side,False)
            max_distance_from_dock_point = 100 # millimeters
            max_angle_from_dock_heading = 10 # degrees
            if dist < max_distance_from_dock_point:
                if relative_angle < max_angle_from_dock_heading and cube.is_visible:
                    print('CheckAlmostDocked is satisfied.  dist=%.1f mm  angle=%.1f deg.' %
                          (dist, relative_angle))
                    self.post_completion()
                else:
                    print('CheckAlmostDocked: bad angle.  (dist=%.1f mm)  angle=%.1f deg.' %
                          (dist, relative_angle))
                    self.post_success()
            else:
                print('CheckAlmostDocked: too far away.  dist=%.1f mm.  (angle=%.1f deg.)' %
                      (dist, relative_angle))
                self.post_failure()


    class ForwardToCube(Forward):
        def __init__(self, offset):
            self.offset = offset
            super().__init__()

        def start(self, event=None):
            if self.running: return
            cube = self.parent.object
            dx = cube.pose.position.x - self.robot.pose.position.x
            dy = cube.pose.position.y - self.robot.pose.position.y
            dist = sqrt(dx*dx + dy*dy) - self.offset
            if (dist < 0):
                print('***** ForwardToCube %s negative distance: %.1f mm' % (self.name,dist))
            self.distance = Distance(dist)
            print('ForwardToCube %s: distance %.1f mm' % (self.name, self.distance.distance_mm))
            super().start(event)


    class ManualDock1(Forward):
        def start(self,event=None):
            rline = self.parent.get_robot_line(use_world_map=True)
            cline = self.parent.get_cube_line(use_world_map=True)
            (intx, inty) = line_intersection(rline, cline)
            (rx, ry,rtheta) = self.parent.get_robot_pose(use_world_map=True)
            dist = sqrt((rx-intx)**2 + (ry-inty)**2)
            dist = min(dist, 100)
            self.distance = Distance(-(dist+center_of_rotation_offset))
            print('ManualDock1: int=',(intx,inty),' distance=',self.distance)
            super().start(event)            
             
    class ManualDock2(Turn):
        def start(self,event=None):
            (rx,ry,rtheta) = self.parent.get_robot_pose(use_world_map=True)
            (ox,oy,o_theta) = self.parent.side
            bearing = atan2(oy-ry, ox-rx)
            self.angle = Angle(radians=wrap_angle(bearing-rtheta))
            super().start(event)

    $setup{
        # GoToCube machine
        
        droplift: SetLiftHeight(0)
        droplift =C=> {looker, waitlift}
        droplift =F=> {looker, waitlift}   # lift motion will fail if on charger

        looker: LookAtObject()

        waitlift: StateNode() =T(1)=>    # allow time for vision to set up world map
           check_almost_docked

        check_almost_docked: self.CheckAlmostDocked()   # sets up parent.side
        check_almost_docked =C=> turn_to_cube2       # we're good to dock right now
        check_almost_docked =S=> manual_dock1        # we're close: skip the Pilot and set up dock manually
        check_almost_docked =F=> pilot_check_start   # not close: use the Pilot to path plan

        manual_dock1: self.ManualDock1()
        manual_dock1 =C=> manual_dock2
        manual_dock1 =T(10)=> Print('Cannot manual dock from here') =N=> pilot_check_start  # temporary

        manual_dock2: self.ManualDock2() =C=> turn_to_cube1

        pilot_check_start: PilotCheckStart()
        pilot_check_start =S=> Print('Start collision check passed.') =N=> go_side
        # TODO: instead of blindly backing up, find the best direction to move.
        pilot_check_start =F=> Print('Backing up to escape start collision...') =N=>
           Forward(-80) =C=> StateNode() =T(0.5)=> pilot_check_start2

        # Second chance to avoid StartCollides.  There is no third chance.
        pilot_check_start2: PilotCheckStart()
        pilot_check_start2 =S=> Print('Start collision re-check passed.') =N=> go_side
        pilot_check_start2 =PILOT(StartCollides)=> check_start2_pilot: ParentPilotEvent()
        pilot_check_start2 =F=> failure

        go_side: self.PilotToSide()
        go_side =PILOT=> go_side_pilot: ParentPilotEvent()
        go_side =F=> failure
        go_side =C=> self.ReportPosition('go_side_deccel')
            =T(0.75)=> self.ReportPosition('go_side_stopped')
            =N=> turn_to_cube1

        turn_to_cube1: self.TurnToCube(check_vis=True) =C=>
            self.ReportPosition('turn_to_cube1_deccel')
            =T(0.75)=> self.ReportPosition('turn_to_cube1_stopped')
            =N=> approach
        turn_to_cube1 =F=> Forward(-50) =C=> StateNode() =T(1)=> turn_to_cube2

        approach: self.ForwardToCube(60) =C=>
            self.ReportPosition('approach') =T(0.75)=>
            self.ReportPosition('approach') =N=>
            turn_to_cube_1a: self.TurnToCube(check_vis=False) =C=>
            forward_to_cube_1a: self.ForwardToCube(15) =C=> success

        turn_to_cube2: self.TurnToCube(check_vis=True)
        turn_to_cube2 =F=> Print("TurnToCube2: Cube Lost") =N=> failure
        turn_to_cube2 =C=> forward_to_cube2

        forward_to_cube2: self.ForwardToCube(60) =C=> turn_to_cube3        

        turn_to_cube3: self.TurnToCube(check_vis=False)   # can't fail
        turn_to_cube3 =C=> forward_to_cube3

        forward_to_cube3: self.ForwardToCube(20) =C=> success

        success: Print('GoToSide has succeeded.') =N=> ParentCompletes()

        failure: Print('GoToSide has failed.') =N=> ParentFails()
    }

class SetCarrying(StateNode):
    def __init__(self,objparam=None):
        self.objparam = objparam
        self.object = None
        super().__init__()
        
    def start(self, event=None):
        if self.objparam is not None:
            self.object = self.objparam
        else:
            self.object = self.parent.object
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.robot.carrying = self.wmobject
        self.wmobject.update_from_sdk = False
        self.wmobject.pose_confidence = +1
        self.robot.fetching = None
        super().start(event)
        self.post_completion()

class SetNotCarrying(StateNode):
    def start(self,event=None):
        self.robot.carrying = None
        super().start(event)
        self.post_completion()

class CheckCarrying(StateNode):
    def start(self, event=None):
        super().start(event)
        if self.robot.carrying:
            self.post_success()
        else:
            self.post_failure()

class SetFetching(StateNode):
    "Prevents pose invalidation if we bump the cube while trying to pick it up."
    def __init__(self,objparam=None):
        self.objparam = objparam
        self.object = None
        super().__init__()
        
    def start(self, event=None):
        if self.objparam is not None:
            self.object = self.objparam
        else:
            self.object = self.parent.object
        if isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.robot.fetching = self.wmobject
        super().start(event)
        self.post_completion()


class SetNotFetching(StateNode):
    def start(self,event=None):
        super().start(event)
        self.robot.fetching = None
        self.post_completion()


class PickUpCube(StateNode):
    """Pick up a cube using our own dock and verify routines.
    Set self.object to indicate the cube to be picked up."""
    
    class VerifyPickup(StateNode):
        def probe_column(self, im, col, row_start, row_end):
            """
            Probe one column of the image, looking for the top horizontal
            black bar of the cube marker.  This bar should be 23-32 pixels
            thick.  Use adaptive thresholding by sorting the pixels and
            finding the darkest ones to set the black threshold.
            """
            pixels = [float(im[r,col,0]) for r in range(row_start,row_end)]
            #print('Column ',col,':',sep='')
            #[print('%4d' % i,end='') for i in pixels]
            pixels.sort()
            npix = len(pixels)
            bindex = 1
            bsum = pixels[0]
            bmax = pixels[0]
            bcnt = 1
            windex = npix-2
            wsum = pixels[npix-1]
            wmin = pixels[npix-1]
            wcnt = 1
            while bindex < windex:
                if abs(bmax-pixels[bindex]) < abs(wmin-pixels[windex]):
                    i = bindex
                    bindex += 1
                else:
                    i = windex
                    windex -= 1
                bmean = bsum / bcnt
                wmean = wsum / wcnt
                val = pixels[i]
                if abs(val-bmean) < abs(val-wmean):
                    bsum += val
                    bcnt += 1
                    bmax = max(bmax,val)
                else:
                    wsum += val
                    wcnt +=1
                    wmin = min(wmin,val)
            black_thresh = bmax
            index = row_start
            nrows = im.shape[0]
            black_run_length = 0
            # initial white run
            while index < nrows and im[index,col,0] > black_thresh:
                index += 1
            if index == nrows: return -1
            while index < nrows and im[index,col,0] <= black_thresh:
                black_run_length += 1
                index +=1
            if index >= nrows-5:
                retval = -1
            else:
                retval = black_run_length
            #print('  col=%3d wmin=%5.1f wmean=%5.1f bmean=%5.1f black_thresh=%5.1f run_length=%d' %
            #      (col, wmin, wmean, bmean, black_thresh, black_run_length))
            return retval

        def start(self,event=None):
            super().start(event)
            im = np.array(self.robot.world.latest_image.raw_image)
            min_length = 20
            max_length = 32
            bad_runs = 0
            print('Verifying pickup.  hangle=%4.1f deg.  langle=%4.1f deg.  lheight=%4.1f mm' %
                  (self.robot.head_angle.degrees, self.robot.lift_angle.degrees,
                   self.robot.lift_height.distance_mm))
            for col in range(100,220,20):
                run_length = self.probe_column(im, col, 0, 100)
                if run_length < min_length or run_length > max_length:
                    bad_runs += 1
            print('  Number of bad_runs:', bad_runs)
            if bad_runs < 2:
                self.post_success()
            else:
                self.post_failure()                

    # PickUpCube methods

    def __init__(self, cube=None):
        self.cube = cube
        super().__init__()

    def picked_up_handler(self):
        print("PickUpCube aborting because robot was picked up.")
        self.post_failure()
        self.stop()

    def start(self, event=None):
        if isinstance(self.cube, LightCube):
            self.object = self.cube
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.cube, LightCubeObj):
            self.wmobject = self.cube
            self.object = self.cube.sdk_obj
        elif isinstance(self.object, LightCube):
            self.wmobject = self.robot.world.world_map.objects[self.object]
        elif isinstance(self.object, LightCubeObj):
            self.wmobject = self.object
            self.object = self.object.sdk_obj
        else:
            raise ValueError(self.object)
        self.children['goto_cube'].object = self.object
        print('Picking up',self.wmobject)
        super().start(event)

    $setup{  # PickUpCube machine
        fetch: SetFetching() =C=> check_carry

        check_carry: CheckCarrying()
        check_carry =S=> DropObject() =C=> goto_cube
        check_carry =F=> goto_cube

        goto_cube: GoToCube()
        goto_cube =PILOT=> goto_cube_pilot: ParentPilotEvent() =N=> fail
        goto_cube =F=> fail
        goto_cube =C=> AbortHeadAction() =T(0.1) => # clear head track
           {raise_lift, raise_head}

        raise_lift: SetLiftHeight(0.4)
        raise_head: SetHeadAngle(5) =C=> raise_head2: SetHeadAngle(0, num_retries=2)

        {raise_lift, raise_head2} =C=> verify

        verify: self.VerifyPickup()
        verify =S=> satisfied
        verify =F=> StateNode() =T(0.5)=> verify2
        verify2: self.VerifyPickup()
        verify2 =S=> satisfied
        verify2 =F=> StateNode() =T(0.5)=> verify3
        verify3: self.VerifyPickup()
        verify3 =S=> satisfied
        verify3 =F=> frustrated

        satisfied: AnimationTriggerNode(trigger=cozmo.anim.Triggers.ReactToBlockPickupSuccess,
                                        ignore_body_track=True,
                                        ignore_head_track=True,
                                        ignore_lift_track=True)
        satisfied =C=> {final_raise, drop_head}

        final_raise: SetLiftHeight(1.0)
        drop_head: SetHeadAngle(0)
        {final_raise, drop_head} =C=> SetCarrying() =N=> ParentCompletes()

        frustrated: StateNode() =N=> AnimationTriggerNode(trigger=cozmo.anim.Triggers.FrustratedByFailure,
                                         ignore_body_track=True,
                                         ignore_head_track=True,
                                         ignore_lift_track=True) =C=>
        missed_cube: SetNotCarrying() =C=> Forward(-5) =C=> {drop_lift, drop_head_low}

        drop_lift: SetLiftHeight(0) =C=> backupmore: Forward(-5)
        drop_head_low: SetHeadAngle(-20)
        {backupmore, drop_head_low} =C=> fail

        fail: SetNotFetching() =C=> ParentFails()

        }

class DropObject(StateNode):

    class SetObject(StateNode):
        def start(self,event=None):
            super().start(event)
            self.parent.object = self.robot.carrying

    class CheckCubeVisible(StateNode):
        def start(self,event=None):
            super().start(event)
            for cube in self.robot.world.light_cubes.values():
                if cube and cube.is_visible:
                    self.post_completion()
                    return
            self.post_failure()

    $setup {
        SetLiftHeight(0) =C=> self.SetObject() =N=> SetFetching() =N=>
          SetNotCarrying() =N=> {backup, lookdown}

        backup: Forward(-15)

        # Robots differ on head angle alignment, so try a shallow angle,
        # and if we don't see the cube, try a steeper one.
        lookdown: SetHeadAngle(-12)
        lookdown =C=> head_angle_wait
        lookdown =F=> head_angle_wait

        head_angle_wait: Print('head_wait') =T(0.5)=> check_visible

        check_visible: self.CheckCubeVisible()
        check_visible =F=> lookdown2p

        lookdown2p: Print('lookdown2p') =N=> lookdown2
        lookdown2: SetHeadAngle(-20)
        lookdown2 =F=> wrap_up  # Shouldn't fail, but just in case
        lookdown2 =T(3)=> Print('lookdown2 timed out') =N=> wrap_up

        {backup, check_visible, lookdown2} =C(2)=> wrap_up

        wrap_up: Print('Drop wrap-up') =N=> SetNotFetching() =N=> ParentCompletes()
    }


class PickUpCubeForeign(StateNode):

    # *** THIS IS OLD CODE AND NEEDS TO BE UPDATED ***

    def __init__(self, cube_id=None):
        self.object_id = cube_id
        super().__init__()

    def start(self, event=None):
        # self.object will be set up by the parent of this node
        self.object = self.robot.world.light_cubes[self.object_id]
        self.foreign_cube_id = 'LightCubeForeignObj-'+str(self.object_id)
        super().start(event)

    def pick_side(self, dist, use_world_map):
        "NOTE: This code is only correct for upright cubes"
        cube = self.foreign_cube_id
        wobj = self.robot.world.world_map.objects[cube]
        x = wobj.x
        y = wobj.y
        ang = wobj.theta
        rx = self.robot.world.particle_filter.pose[0]
        ry = self.robot.world.particle_filter.pose[1]

        side1 = (x + cos(ang) * dist, y + sin(ang) * dist, ang + pi)
        side2 = (x - cos(ang) * dist, y - sin(ang) * dist, ang)
        side3 = (x + sin(ang) * dist, y - cos(ang) * dist, ang + pi/2)
        side4 = (x - sin(ang) * dist, y + cos(ang) * dist, ang - pi/2)
        sides = [side1, side2, side3, side4]
        sorted_sides = sorted(sides, key=lambda pt: (pt[0]-rx)**2 + (pt[1]-ry)**2)
        return sorted_sides[0]

    class GoToSide(WallPilotToPose):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            cube = self.parent.foreign_cube_id
            print('Selected cube',self.robot.world.world_map.objects[cube])
            (x, y, theta) = self.parent.pick_side(200, True)
            self.target_pose = Pose(x, y, self.robot.pose.position.z,
                                    angle_z=Angle(radians = wrap_angle(theta)))
            print('pickup.GoToSide: traveling to (%.1f, %.1f) @ %.1f deg.' %
                  (self.target_pose.position.x, self.target_pose.position.y,
                   self.target_pose.rotation.angle_z.degrees))
            super().start(event)

    class Pick(PickUpCube):
        def __init__(self):
            super().__init__(None)

        def start(self, event=None):
            self.object = self.parent.object
            super().start(event)

    $setup{  # PickUpCube machine
        goto_cube: self.GoToSide() =C=> one

        one: self.Pick() =C=> end
        end: Say("Done") =C=> ParentCompletes()
        }
